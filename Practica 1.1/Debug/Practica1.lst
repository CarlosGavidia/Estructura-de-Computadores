
Practica1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000c0088  0c000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .bss          000c0004  0c0c0088  0c0c0088  000c8088  2**2
                  ALLOC
  2 .text         000005a4  0c18008c  0c18008c  000c808c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.attributes 0000002c  00000000  00000000  000c8630  2**0
                  CONTENTS, READONLY
  4 .comment      0000003b  00000000  00000000  000c865c  2**0
                  CONTENTS, READONLY
  5 .debug_line   0000052d  00000000  00000000  000c8697  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000004d8  00000000  00000000  000c8bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000026d  00000000  00000000  000c909c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000000a0  00000000  00000000  000c9310  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_macinfo 0000af62  00000000  00000000  000c93b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubnames 000000fc  00000000  00000000  000d4312  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001cc  00000000  00000000  000d440e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000134  00000000  00000000  000d45da  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000060  00000000  00000000  000d470e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000118  00000000  00000000  000d4770  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0c18008c <start>:
    .extern main
    .extern _stack
	.global start

start:
    ldr sp,=_stack
 c18008c:	e59fd008 	ldr	sp, [pc, #8]	; c18009c <End+0x4>
    mov fp,#0
 c180090:	e3a0b000 	mov	fp, #0
    
    bl main
 c180094:	eb00000f 	bl	c1800d8 <main>

0c180098 <End>:

End:
    B End
 c180098:	eafffffe 	b	c180098 <End>
 c18009c:	0c7ff000 	.word	0x0c7ff000

0c1800a0 <initRGB>:
        	imagenRGB[i*ncols+j].B = (i+j)%256;
        }
}
#else
void initRGB(int nfilas, int ncols)
{
 c1800a0:	e1a0c00d 	mov	ip, sp
 c1800a4:	e92dd800 	push	{fp, ip, lr, pc}
 c1800a8:	e24cb004 	sub	fp, ip, #4
 c1800ac:	e24dd008 	sub	sp, sp, #8
 c1800b0:	e50b0010 	str	r0, [fp, #-16]
 c1800b4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    imagenRGB = (pixelRGB*) imageLena512;
 c1800b8:	e59f2010 	ldr	r2, [pc, #16]	; c1800d0 <initRGB+0x30>
 c1800bc:	e59f3010 	ldr	r3, [pc, #16]	; c1800d4 <initRGB+0x34>
 c1800c0:	e5832000 	str	r2, [r3]
}
 c1800c4:	e24bd00c 	sub	sp, fp, #12
 c1800c8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1800cc:	e12fff1e 	bx	lr
 c1800d0:	0c000000 	.word	0x0c000000
 c1800d4:	0c0c0088 	.word	0x0c0c0088

0c1800d8 <main>:
#endif


int main() {
 c1800d8:	e1a0c00d 	mov	ip, sp
 c1800dc:	e92dd800 	push	{fp, ip, lr, pc}
 c1800e0:	e24cb004 	sub	fp, ip, #4
 c1800e4:	e24dd008 	sub	sp, sp, #8
	short int time = 0;
 c1800e8:	e3a03000 	mov	r3, #0
 c1800ec:	e14b30be 	strh	r3, [fp, #-14]
    timer_init();
 c1800f0:	eb000054 	bl	c180248 <timer_init>
    initRGB(N,M);
 c1800f4:	e3a00c02 	mov	r0, #512	; 0x200
 c1800f8:	e3a01c02 	mov	r1, #512	; 0x200
 c1800fc:	ebffffe7 	bl	c1800a0 <initRGB>
    timer_start();
 c180100:	eb00005b 	bl	c180274 <timer_start>
    RGB2GrayMatrix(imagenRGB, imagenGris,N,M);
 c180104:	e59f305c 	ldr	r3, [pc, #92]	; c180168 <main+0x90>
 c180108:	e5933000 	ldr	r3, [r3]
 c18010c:	e1a00003 	mov	r0, r3
 c180110:	e59f1054 	ldr	r1, [pc, #84]	; c18016c <main+0x94>
 c180114:	e3a02c02 	mov	r2, #512	; 0x200
 c180118:	e3a03c02 	mov	r3, #512	; 0x200
 c18011c:	eb000080 	bl	c180324 <RGB2GrayMatrix>
    apply_gaussian(imagenGris, imagenGauss, N, M);
 c180120:	e59f0044 	ldr	r0, [pc, #68]	; c18016c <main+0x94>
 c180124:	e59f1044 	ldr	r1, [pc, #68]	; c180170 <main+0x98>
 c180128:	e3a02c02 	mov	r2, #512	; 0x200
 c18012c:	e3a03c02 	mov	r3, #512	; 0x200
 c180130:	eb000029 	bl	c1801dc <apply_gaussian>
    apply_sobel(imagenGauss, imagenSobel, N, M);
 c180134:	e59f0034 	ldr	r0, [pc, #52]	; c180170 <main+0x98>
 c180138:	e59f1034 	ldr	r1, [pc, #52]	; c180174 <main+0x9c>
 c18013c:	e3a02c02 	mov	r2, #512	; 0x200
 c180140:	e3a03c02 	mov	r3, #512	; 0x200
 c180144:	eb0000ab 	bl	c1803f8 <apply_sobel>
    time = timer_stop();
 c180148:	eb00005e 	bl	c1802c8 <timer_stop>
 c18014c:	e1a03000 	mov	r3, r0
 c180150:	e14b30be 	strh	r3, [fp, #-14]
    return 0;
 c180154:	e3a03000 	mov	r3, #0
}
 c180158:	e1a00003 	mov	r0, r3
 c18015c:	e24bd00c 	sub	sp, fp, #12
 c180160:	e89d6800 	ldm	sp, {fp, sp, lr}
 c180164:	e12fff1e 	bx	lr
 c180168:	0c0c0088 	.word	0x0c0c0088
 c18016c:	0c14008c 	.word	0x0c14008c
 c180170:	0c0c008c 	.word	0x0c0c008c
 c180174:	0c10008c 	.word	0x0c10008c

0c180178 <rgb2gray>:
	.global rgb2gray
	.global div16384
	.global apply_gaussian

rgb2gray:
	push {r4,r5,r6,r7,lr}
 c180178:	e92d40f0 	push	{r4, r5, r6, r7, lr}

	mov r1, r0 // se guarda el puntero que le llega por parametro
 c18017c:	e1a01000 	mov	r1, r0
	ldr r5, =COEF1// se cargan las constantes
 c180180:	e59f50b4 	ldr	r5, [pc, #180]	; c18023c <fin_for1+0x8>
	ldr r6,=COEF2
 c180184:	e59f60b4 	ldr	r6, [pc, #180]	; c180240 <fin_for1+0xc>
	ldr r7,=COEF3
 c180188:	e59f70b4 	ldr	r7, [pc, #180]	; c180244 <fin_for1+0x10>
	ldrb r2, [r1] // se carga el dato(b ya que es char y solo cupa un bit)
 c18018c:	e5d12000 	ldrb	r2, [r1]
	mul r2,r5,r2 //COEF1*pixel->R
 c180190:	e0020295 	mul	r2, r5, r2
	add r1,r1,#1 // sesuma uno a la direccion para acceder al siguiente elemento.
 c180194:	e2811001 	add	r1, r1, #1
	ldrb r3, [r1]
 c180198:	e5d13000 	ldrb	r3, [r1]
	mul r3,r6,r3 //COEF2*pixel->R
 c18019c:	e0030396 	mul	r3, r6, r3
	add r1, r1,#1
 c1801a0:	e2811001 	add	r1, r1, #1
	ldrb r4, [r1]
 c1801a4:	e5d14000 	ldrb	r4, [r1]
	mul r4,r7,r4 //COEF3*pixel->R
 c1801a8:	e0040497 	mul	r4, r7, r4
	add r0,r2,r3 // se suma lo que nos ha dado al multiplicar
 c1801ac:	e0820003 	add	r0, r2, r3
	add r0, r0,r4
 c1801b0:	e0800004 	add	r0, r0, r4

	bl div16384 // se llama para dividir
 c1801b4:	eb000000 	bl	c1801bc <div16384>

	pop {r4,r5,r6,r7,pc}
 c1801b8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0c1801bc <div16384>:

div16384:

	mov r1 ,#0 // cociente=0
 c1801bc:	e3a01000 	mov	r1, #0

0c1801c0 <while>:
	while:cmp r0, #COEF4 //se guarda 16384
 c1801c0:	e3500901 	cmp	r0, #16384	; 0x4000
			blt fin_while // cuando sea menor sale
 c1801c4:	ba000002 	blt	c1801d4 <fin_while>
			sub r0, r0, #COEF4 // va restando lo que le pasas por parametro(numerador) menos la constante
 c1801c8:	e2400901 	sub	r0, r0, #16384	; 0x4000
			add r1, r1, #1 // se suma 1 para el contador
 c1801cc:	e2811001 	add	r1, r1, #1
			b while
 c1801d0:	eafffffa 	b	c1801c0 <while>

0c1801d4 <fin_while>:

		fin_while: // en r1 esta el cociente y se mete en r0 para devolverlo
		 mov r0,r1
 c1801d4:	e1a00001 	mov	r0, r1


	mov pc,lr
 c1801d8:	e1a0f00e 	mov	pc, lr

0c1801dc <apply_gaussian>:

apply_gaussian:
	push {r4,r5,r6,r7,r8,r9,lr,fp}
 c1801dc:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}

	mov r4,#0// i=0
 c1801e0:	e3a04000 	mov	r4, #0

0c1801e4 <for1>:

	for1:cmp r4,r3 // i < height
 c1801e4:	e1540003 	cmp	r4, r3
		bge fin_for1
 c1801e8:	aa000011 	bge	c180234 <fin_for1>
		mov r5,#0 // j=0
 c1801ec:	e3a05000 	mov	r5, #0

0c1801f0 <for2>:

		for2:cmp r5,r2//j < width
 c1801f0:	e1550002 	cmp	r5, r2
			bge fin_for2
 c1801f4:	aa00000c 	bge	c18022c <fin_for2>

			push {r0-r5}//para que no se pierdan los datos en esos registros que hemos tocado antes
 c1801f8:	e92d003f 	push	{r0, r1, r2, r3, r4, r5}
			mov r1,r2// en r1 = width
 c1801fc:	e1a01002 	mov	r1, r2
			mov r2,r3 // en r2 = height
 c180200:	e1a02003 	mov	r2, r3
			mov r3,r4 // en r3 = i
 c180204:	e1a03004 	mov	r3, r4

			push {r5}// para que r5 no se modifique al llamar a gaussian
 c180208:	e52d5004 	push	{r5}		; (str r5, [sp, #-4]!)
			bl gaussian
 c18020c:	eb0000a9 	bl	c1804b8 <gaussian>
			pop {r5}
 c180210:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)

			mov r6,r0// el entero que devuelve esa funcion se guarda en r6
 c180214:	e1a06000 	mov	r6, r0
			pop {r0-r5}//recupera los registros
 c180218:	e8bd003f 	pop	{r0, r1, r2, r3, r4, r5}

			mla r7,r4,r2,r5//i * width + j
 c18021c:	e0275294 	mla	r7, r4, r2, r5
			strb r6,[r1,r7]// se guarda en la direccion im2[], en la posicion de i * width + j, y se guarda el registro r6(solo 1 bit ya que es char y ocupa un espacio)
 c180220:	e7c16007 	strb	r6, [r1, r7]
			add r5,r5,#1 // j++
 c180224:	e2855001 	add	r5, r5, #1
			b for2
 c180228:	eafffff0 	b	c1801f0 <for2>

0c18022c <fin_for2>:

			fin_for2:
			add r4,r4,#1//i++
 c18022c:	e2844001 	add	r4, r4, #1
			b for1
 c180230:	eaffffeb 	b	c1801e4 <for1>

0c180234 <fin_for1>:

		fin_for1:
		pop {r4,r5,r6,r7,r8,r9,lr,fp}
 c180234:	e8bd4bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
		mov pc,lr
 c180238:	e1a0f00e 	mov	pc, lr
 c18023c:	00000d9b 	.word	0x00000d9b
 c180240:	00002dc6 	.word	0x00002dc6
 c180244:	0000049f 	.word	0x0000049f

0c180248 <timer_init>:
 c180248:	e1a0c00d 	mov	ip, sp
 c18024c:	e92dd800 	push	{fp, ip, lr, pc}
 c180250:	e24cb004 	sub	fp, ip, #4
 c180254:	e59f3010 	ldr	r3, [pc, #16]	; c18026c <timer_init+0x24>
 c180258:	e59f2010 	ldr	r2, [pc, #16]	; c180270 <timer_init+0x28>
 c18025c:	e5832000 	str	r2, [r3]
 c180260:	e24bd00c 	sub	sp, fp, #12
 c180264:	e89d6800 	ldm	sp, {fp, sp, lr}
 c180268:	e12fff1e 	bx	lr
 c18026c:	01d30000 	.word	0x01d30000
 c180270:	0000f918 	.word	0x0000f918

0c180274 <timer_start>:
 c180274:	e1a0c00d 	mov	ip, sp
 c180278:	e92dd800 	push	{fp, ip, lr, pc}
 c18027c:	e24cb004 	sub	fp, ip, #4
 c180280:	e59f3030 	ldr	r3, [pc, #48]	; c1802b8 <timer_start+0x44>
 c180284:	e59f2030 	ldr	r2, [pc, #48]	; c1802bc <timer_start+0x48>
 c180288:	e5832000 	str	r2, [r3]
 c18028c:	e59f302c 	ldr	r3, [pc, #44]	; c1802c0 <timer_start+0x4c>
 c180290:	e59f2024 	ldr	r2, [pc, #36]	; c1802bc <timer_start+0x48>
 c180294:	e5832000 	str	r2, [r3]
 c180298:	e59f3024 	ldr	r3, [pc, #36]	; c1802c4 <timer_start+0x50>
 c18029c:	e59f2020 	ldr	r2, [pc, #32]	; c1802c4 <timer_start+0x50>
 c1802a0:	e5922000 	ldr	r2, [r2]
 c1802a4:	e3822020 	orr	r2, r2, #32
 c1802a8:	e5832000 	str	r2, [r3]
 c1802ac:	e24bd00c 	sub	sp, fp, #12
 c1802b0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1802b4:	e12fff1e 	bx	lr
 c1802b8:	01d30004 	.word	0x01d30004
 c1802bc:	0000ffff 	.word	0x0000ffff
 c1802c0:	01d30008 	.word	0x01d30008
 c1802c4:	01d30000 	.word	0x01d30000

0c1802c8 <timer_stop>:
 c1802c8:	e1a0c00d 	mov	ip, sp
 c1802cc:	e92dd800 	push	{fp, ip, lr, pc}
 c1802d0:	e24cb004 	sub	fp, ip, #4
 c1802d4:	e59f3040 	ldr	r3, [pc, #64]	; c18031c <timer_stop+0x54>
 c1802d8:	e59f203c 	ldr	r2, [pc, #60]	; c18031c <timer_stop+0x54>
 c1802dc:	e5922000 	ldr	r2, [r2]
 c1802e0:	e3c22020 	bic	r2, r2, #32
 c1802e4:	e5832000 	str	r2, [r3]
 c1802e8:	e59f3030 	ldr	r3, [pc, #48]	; c180320 <timer_stop+0x58>
 c1802ec:	e5933000 	ldr	r3, [r3]
 c1802f0:	e1a03803 	lsl	r3, r3, #16
 c1802f4:	e1a03823 	lsr	r3, r3, #16
 c1802f8:	e1e03003 	mvn	r3, r3
 c1802fc:	e1a03803 	lsl	r3, r3, #16
 c180300:	e1a03823 	lsr	r3, r3, #16
 c180304:	e1a03803 	lsl	r3, r3, #16
 c180308:	e1a03843 	asr	r3, r3, #16
 c18030c:	e1a00003 	mov	r0, r3
 c180310:	e24bd00c 	sub	sp, fp, #12
 c180314:	e89d6800 	ldm	sp, {fp, sp, lr}
 c180318:	e12fff1e 	bx	lr
 c18031c:	01d30000 	.word	0x01d30000
 c180320:	01d30008 	.word	0x01d30008

0c180324 <RGB2GrayMatrix>:
{
	 return (3483*pixel->R + 11718*pixel->G + 1183*pixel->B) /16384;

}*/

void RGB2GrayMatrix(pixelRGB orig[], unsigned char dest[], int nfilas, int ncols) {
 c180324:	e1a0c00d 	mov	ip, sp
 c180328:	e92dd810 	push	{r4, fp, ip, lr, pc}
 c18032c:	e24cb004 	sub	fp, ip, #4
 c180330:	e24dd01c 	sub	sp, sp, #28
 c180334:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
 c180338:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
 c18033c:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
 c180340:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    int i,j;

    for (i=0;i<nfilas;i++)
 c180344:	e3a03000 	mov	r3, #0
 c180348:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c18034c:	ea000022 	b	c1803dc <RGB2GrayMatrix+0xb8>
        for (j=0; j<ncols; j++)
 c180350:	e3a03000 	mov	r3, #0
 c180354:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
 c180358:	ea000018 	b	c1803c0 <RGB2GrayMatrix+0x9c>
            dest[i*ncols+j] =  rgb2gray(&orig[i*ncols+j]);
 c18035c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c180360:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
 c180364:	e0020293 	mul	r2, r3, r2
 c180368:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c18036c:	e0823003 	add	r3, r2, r3
 c180370:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
 c180374:	e0824003 	add	r4, r2, r3
 c180378:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c18037c:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
 c180380:	e0020293 	mul	r2, r3, r2
 c180384:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c180388:	e0823003 	add	r3, r2, r3
 c18038c:	e1a02003 	mov	r2, r3
 c180390:	e1a03002 	mov	r3, r2
 c180394:	e1a03083 	lsl	r3, r3, #1
 c180398:	e0833002 	add	r3, r3, r2
 c18039c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c1803a0:	e0823003 	add	r3, r2, r3
 c1803a4:	e1a00003 	mov	r0, r3
 c1803a8:	ebffff72 	bl	c180178 <rgb2gray>
 c1803ac:	e1a03000 	mov	r3, r0
 c1803b0:	e5c43000 	strb	r3, [r4]

void RGB2GrayMatrix(pixelRGB orig[], unsigned char dest[], int nfilas, int ncols) {
    int i,j;

    for (i=0;i<nfilas;i++)
        for (j=0; j<ncols; j++)
 c1803b4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c1803b8:	e2833001 	add	r3, r3, #1
 c1803bc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
 c1803c0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c1803c4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
 c1803c8:	e1520003 	cmp	r2, r3
 c1803cc:	baffffe2 	blt	c18035c <RGB2GrayMatrix+0x38>
}*/

void RGB2GrayMatrix(pixelRGB orig[], unsigned char dest[], int nfilas, int ncols) {
    int i,j;

    for (i=0;i<nfilas;i++)
 c1803d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1803d4:	e2833001 	add	r3, r3, #1
 c1803d8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c1803dc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c1803e0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c1803e4:	e1520003 	cmp	r2, r3
 c1803e8:	baffffd8 	blt	c180350 <RGB2GrayMatrix+0x2c>
        for (j=0; j<ncols; j++)
            dest[i*ncols+j] =  rgb2gray(&orig[i*ncols+j]);

}
 c1803ec:	e24bd010 	sub	sp, fp, #16
 c1803f0:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
 c1803f4:	e12fff1e 	bx	lr

0c1803f8 <apply_sobel>:
		for (j=0 ; j < width; ++j)
			im2[i * width + j] = gaussian(im1, width, height, i, j);
}*/

void apply_sobel(unsigned char im1[], unsigned char im2[], int width, int height)
{
 c1803f8:	e1a0c00d 	mov	ip, sp
 c1803fc:	e92dd810 	push	{r4, fp, ip, lr, pc}
 c180400:	e24cb004 	sub	fp, ip, #4
 c180404:	e24dd024 	sub	sp, sp, #36	; 0x24
 c180408:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
 c18040c:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
 c180410:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
 c180414:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
	int i,j;
	for (i=0 ; i < height; ++i)
 c180418:	e3a03000 	mov	r3, #0
 c18041c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c180420:	ea00001d 	b	c18049c <apply_sobel+0xa4>
		for (j=0 ; j < width; ++j)
 c180424:	e3a03000 	mov	r3, #0
 c180428:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
 c18042c:	ea000013 	b	c180480 <apply_sobel+0x88>
			im2[i * width + j] = sobel(im1, width, height, i, j);
 c180430:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c180434:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
 c180438:	e0020293 	mul	r2, r3, r2
 c18043c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c180440:	e0823003 	add	r3, r2, r3
 c180444:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
 c180448:	e0824003 	add	r4, r2, r3
 c18044c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c180450:	e58d3000 	str	r3, [sp]
 c180454:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
 c180458:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
 c18045c:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
 c180460:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c180464:	eb000040 	bl	c18056c <sobel>
 c180468:	e1a03000 	mov	r3, r0
 c18046c:	e20330ff 	and	r3, r3, #255	; 0xff
 c180470:	e5c43000 	strb	r3, [r4]

void apply_sobel(unsigned char im1[], unsigned char im2[], int width, int height)
{
	int i,j;
	for (i=0 ; i < height; ++i)
		for (j=0 ; j < width; ++j)
 c180474:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c180478:	e2833001 	add	r3, r3, #1
 c18047c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
 c180480:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c180484:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c180488:	e1520003 	cmp	r2, r3
 c18048c:	baffffe7 	blt	c180430 <apply_sobel+0x38>
}*/

void apply_sobel(unsigned char im1[], unsigned char im2[], int width, int height)
{
	int i,j;
	for (i=0 ; i < height; ++i)
 c180490:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c180494:	e2833001 	add	r3, r3, #1
 c180498:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c18049c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c1804a0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
 c1804a4:	e1520003 	cmp	r2, r3
 c1804a8:	baffffdd 	blt	c180424 <apply_sobel+0x2c>
		for (j=0 ; j < width; ++j)
			im2[i * width + j] = sobel(im1, width, height, i, j);
}
 c1804ac:	e24bd010 	sub	sp, fp, #16
 c1804b0:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
 c1804b4:	e12fff1e 	bx	lr

0c1804b8 <gaussian>:
 c1804b8:	e92d01f0 	push	{r4, r5, r6, r7, r8}
 c1804bc:	e3530001 	cmp	r3, #1
 c1804c0:	e59dc014 	ldr	ip, [sp, #20]
 c1804c4:	da000022 	ble	c180554 <gaussian+0x9c>
 c1804c8:	e2422002 	sub	r2, r2, #2
 c1804cc:	e1530002 	cmp	r3, r2
 c1804d0:	aa00001f 	bge	c180554 <gaussian+0x9c>
 c1804d4:	e35c0001 	cmp	ip, #1
 c1804d8:	da00001d 	ble	c180554 <gaussian+0x9c>
 c1804dc:	e2412002 	sub	r2, r1, #2
 c1804e0:	e15c0002 	cmp	ip, r2
 c1804e4:	aa00001a 	bge	c180554 <gaussian+0x9c>
 c1804e8:	e2433002 	sub	r3, r3, #2
 c1804ec:	e02cc391 	mla	ip, r1, r3, ip
 c1804f0:	e3a07000 	mov	r7, #0
 c1804f4:	e59f8068 	ldr	r8, [pc, #104]	; c180564 <gaussian+0xac>
 c1804f8:	e080000c 	add	r0, r0, ip
 c1804fc:	e1a0c007 	mov	ip, r7
 c180500:	e0872107 	add	r2, r7, r7, lsl #2
 c180504:	e0882102 	add	r2, r8, r2, lsl #2
 c180508:	e2422004 	sub	r2, r2, #4
 c18050c:	e2806005 	add	r6, r0, #5
 c180510:	e1a03000 	mov	r3, r0
 c180514:	e5534002 	ldrb	r4, [r3, #-2]
 c180518:	e5b25004 	ldr	r5, [r2, #4]!
 c18051c:	e2833001 	add	r3, r3, #1
 c180520:	e1530006 	cmp	r3, r6
 c180524:	e02cc495 	mla	ip, r5, r4, ip
 c180528:	1afffff9 	bne	c180514 <gaussian+0x5c>
 c18052c:	e2877001 	add	r7, r7, #1
 c180530:	e3570005 	cmp	r7, #5
 c180534:	e0800001 	add	r0, r0, r1
 c180538:	1afffff0 	bne	c180500 <gaussian+0x48>
 c18053c:	e59f3024 	ldr	r3, [pc, #36]	; c180568 <gaussian+0xb0>
 c180540:	e083239c 	umull	r2, r3, ip, r3
 c180544:	e063c00c 	rsb	ip, r3, ip
 c180548:	e08330ac 	add	r3, r3, ip, lsr #1
 c18054c:	e1a00423 	lsr	r0, r3, #8
 c180550:	ea000001 	b	c18055c <gaussian+0xa4>
 c180554:	e0200391 	mla	r0, r1, r3, r0
 c180558:	e7d0000c 	ldrb	r0, [r0, ip]
 c18055c:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
 c180560:	e12fff1e 	bx	lr
 c180564:	0c0c0000 	.word	0x0c0c0000
 c180568:	e01e01e1 	.word	0xe01e01e1

0c18056c <sobel>:
 c18056c:	e92d0ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp}
 c180570:	e3530000 	cmp	r3, #0
 c180574:	e59dc020 	ldr	ip, [sp, #32]
 c180578:	da000027 	ble	c18061c <sobel+0xb0>
 c18057c:	e2422001 	sub	r2, r2, #1
 c180580:	e1530002 	cmp	r3, r2
 c180584:	aa000024 	bge	c18061c <sobel+0xb0>
 c180588:	e35c0000 	cmp	ip, #0
 c18058c:	da000022 	ble	c18061c <sobel+0xb0>
 c180590:	e2412001 	sub	r2, r1, #1
 c180594:	e15c0002 	cmp	ip, r2
 c180598:	aa00001f 	bge	c18061c <sobel+0xb0>
 c18059c:	e2433001 	sub	r3, r3, #1
 c1805a0:	e02cc391 	mla	ip, r1, r3, ip
 c1805a4:	e3a05000 	mov	r5, #0
 c1805a8:	e24cc001 	sub	ip, ip, #1
 c1805ac:	e59fb074 	ldr	fp, [pc, #116]	; c180628 <sobel+0xbc>
 c1805b0:	e080000c 	add	r0, r0, ip
 c1805b4:	e1a06005 	mov	r6, r5
 c1805b8:	e1a07005 	mov	r7, r5
 c1805bc:	e0854085 	add	r4, r5, r5, lsl #1
 c1805c0:	e08b4104 	add	r4, fp, r4, lsl #2
 c1805c4:	e2444004 	sub	r4, r4, #4
 c1805c8:	e08b9105 	add	r9, fp, r5, lsl #2
 c1805cc:	e1a0c000 	mov	ip, r0
 c1805d0:	e3a03000 	mov	r3, #0
 c1805d4:	e4dc2001 	ldrb	r2, [ip], #1
 c1805d8:	e7998003 	ldr	r8, [r9, r3]
 c1805dc:	e5b4a004 	ldr	sl, [r4, #4]!
 c1805e0:	e283300c 	add	r3, r3, #12
 c1805e4:	e3530024 	cmp	r3, #36	; 0x24
 c1805e8:	e027729a 	mla	r7, sl, r2, r7
 c1805ec:	e0266298 	mla	r6, r8, r2, r6
 c1805f0:	1afffff7 	bne	c1805d4 <sobel+0x68>
 c1805f4:	e2855001 	add	r5, r5, #1
 c1805f8:	e3550003 	cmp	r5, #3
 c1805fc:	e0800001 	add	r0, r0, r1
 c180600:	1affffed 	bne	c1805bc <sobel+0x50>
 c180604:	e3570000 	cmp	r7, #0
 c180608:	b2677000 	rsblt	r7, r7, #0
 c18060c:	e3560000 	cmp	r6, #0
 c180610:	b2666000 	rsblt	r6, r6, #0
 c180614:	e0870006 	add	r0, r7, r6
 c180618:	ea000000 	b	c180620 <sobel+0xb4>
 c18061c:	e3a00000 	mov	r0, #0
 c180620:	e8bd0ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
 c180624:	e12fff1e 	bx	lr
 c180628:	0c0c0064 	.word	0x0c0c0064

0c18062c <non_max_sup>:
 c18062c:	e12fff1e 	bx	lr
