   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"D8Led.c"
  21              	.Ltext0:
  22              		.file 1 "../D8Led.c"
 1786              		.align	2
 1789              	Segments:
 1790 0000 80000000 		.word	128
 1791 0004 40000000 		.word	64
 1792 0008 20000000 		.word	32
 1793 000c 08000000 		.word	8
 1794 0010 04000000 		.word	4
 1795 0014 01000000 		.word	1
 1796 0018 02000000 		.word	2
 1797 001c 10000000 		.word	16
 1798              		.align	2
 1801              	Digits:
 1802 0020 ED000000 		.word	237
 1803 0024 60000000 		.word	96
 1804 0028 CE000000 		.word	206
 1805 002c EA000000 		.word	234
 1806 0030 63000000 		.word	99
 1807 0034 AB000000 		.word	171
 1808 0038 AF000000 		.word	175
 1809 003c E0000000 		.word	224
 1810 0040 EF000000 		.word	239
 1811 0044 E3000000 		.word	227
 1812 0048 E7000000 		.word	231
 1813 004c 2F000000 		.word	47
 1814 0050 0E000000 		.word	14
 1815 0054 6E000000 		.word	110
 1816 0058 8F000000 		.word	143
 1817 005c 87000000 		.word	135
 1818              		.text
 1819              		.align	2
 1820              		.global	D8Led_init
 1822              	D8Led_init:
 1823              	.LFB0:
   1:../D8Led.c    **** //Copiar código completo de la práctica 2
   2:../D8Led.c    **** #include "44b.h"
   3:../D8Led.c    **** #include "D8Led.h"
   4:../D8Led.c    **** 
   5:../D8Led.c    **** /*
   6:../D8Led.c    ****  * Máscaras útiles para el uso del display de 8 segmentos
   7:../D8Led.c    ****  * Cada bit representa un segmento. En la máscara ponemos
   8:../D8Led.c    ****  * un 1 si queremos que se encienda dicho segmento. Como
   9:../D8Led.c    ****  * el display funciona con lógica invertida, nos toca
  10:../D8Led.c    ****  * invertir el valor al escribir en el puerto.
  11:../D8Led.c    ****  */
  12:../D8Led.c    **** #define SEGMENT_A		0x80
  13:../D8Led.c    **** #define SEGMENT_B		0x40
  14:../D8Led.c    **** #define SEGMENT_C		0x20
  15:../D8Led.c    **** #define SEGMENT_D		0x08
  16:../D8Led.c    **** #define SEGMENT_E		0x04
  17:../D8Led.c    **** #define SEGMENT_F		0x02
  18:../D8Led.c    **** #define SEGMENT_G		0x01
  19:../D8Led.c    **** #define SEGMENT_P		0x10
  20:../D8Led.c    **** 
  21:../D8Led.c    **** #define DIGIT_0  ( SEGMENT_A | SEGMENT_B | SEGMENT_C | SEGMENT_D | SEGMENT_E | SEGMENT_G )
  22:../D8Led.c    **** #define DIGIT_1  ( SEGMENT_B | SEGMENT_C )
  23:../D8Led.c    **** #define DIGIT_2  ( SEGMENT_A | SEGMENT_B | SEGMENT_F | SEGMENT_E | SEGMENT_D )
  24:../D8Led.c    **** #define DIGIT_3  ( SEGMENT_A | SEGMENT_B | SEGMENT_C | SEGMENT_D | SEGMENT_F )
  25:../D8Led.c    **** #define DIGIT_4  ( SEGMENT_F | SEGMENT_B | SEGMENT_C | SEGMENT_G )
  26:../D8Led.c    **** #define DIGIT_5  ( SEGMENT_A | SEGMENT_C | SEGMENT_D | SEGMENT_G | SEGMENT_F )
  27:../D8Led.c    **** #define DIGIT_6  ( SEGMENT_A | SEGMENT_C | SEGMENT_D | SEGMENT_E | SEGMENT_F | SEGMENT_G )
  28:../D8Led.c    **** #define DIGIT_7  ( SEGMENT_A | SEGMENT_B | SEGMENT_C )
  29:../D8Led.c    **** #define DIGIT_8  ( SEGMENT_A | SEGMENT_B | SEGMENT_C | SEGMENT_D | SEGMENT_E | SEGMENT_F | SEGMENT_
  30:../D8Led.c    **** #define DIGIT_9  ( SEGMENT_A | SEGMENT_B | SEGMENT_C | SEGMENT_F | SEGMENT_G )
  31:../D8Led.c    **** #define DIGIT_A  ( SEGMENT_A | SEGMENT_B | SEGMENT_C | SEGMENT_E | SEGMENT_F | SEGMENT_G )
  32:../D8Led.c    **** #define DIGIT_B  ( SEGMENT_C | SEGMENT_D | SEGMENT_E | SEGMENT_F | SEGMENT_G )
  33:../D8Led.c    **** #define DIGIT_C  ( SEGMENT_D | SEGMENT_E | SEGMENT_F )
  34:../D8Led.c    **** #define DIGIT_D  ( SEGMENT_B | SEGMENT_C | SEGMENT_D | SEGMENT_E | SEGMENT_F )
  35:../D8Led.c    **** #define DIGIT_E  ( SEGMENT_A | SEGMENT_D | SEGMENT_E | SEGMENT_F | SEGMENT_G )
  36:../D8Led.c    **** #define DIGIT_F  ( SEGMENT_A | SEGMENT_E | SEGMENT_F | SEGMENT_G )
  37:../D8Led.c    **** 
  38:../D8Led.c    **** 
  39:../D8Led.c    **** /* Tablas para facilitar el uso del display */
  40:../D8Led.c    **** 
  41:../D8Led.c    **** static unsigned int Segments[] = { SEGMENT_A, SEGMENT_B, SEGMENT_C, SEGMENT_D,
  42:../D8Led.c    **** 	                               SEGMENT_E, SEGMENT_G, SEGMENT_F, SEGMENT_P };
  43:../D8Led.c    **** 
  44:../D8Led.c    **** static unsigned int Digits[] = { DIGIT_0, DIGIT_1, DIGIT_2, DIGIT_3,
  45:../D8Led.c    **** 	 							 DIGIT_4, DIGIT_5, DIGIT_6, DIGIT_7,
  46:../D8Led.c    **** 								 DIGIT_8, DIGIT_9, DIGIT_A, DIGIT_B,
  47:../D8Led.c    **** 								 DIGIT_C, DIGIT_D, DIGIT_E, DIGIT_F };
  48:../D8Led.c    **** 
  49:../D8Led.c    **** void D8Led_init(void)
  50:../D8Led.c    **** {
 1824              		.loc 1 50 0
 1825              		.cfi_startproc
 1826              		@ Function supports interworking.
 1827              		@ args = 0, pretend = 0, frame = 0
 1828              		@ frame_needed = 1, uses_anonymous_args = 0
 1829 0000 0DC0A0E1 		mov	ip, sp
 1830              	.LCFI0:
 1831              		.cfi_def_cfa_register 12
 1832 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1833 0008 04B04CE2 		sub	fp, ip, #4
 1834              		.cfi_offset 14, -8
 1835              		.cfi_offset 13, -12
 1836              		.cfi_offset 11, -16
 1837              	.LCFI1:
 1838              		.cfi_def_cfa 11, 4
  51:../D8Led.c    ****     LED8ADDR = ~0 ;
 1839              		.loc 1 51 0
 1840 000c 8537A0E3 		mov	r3, #34865152
 1841 0010 0020E0E3 		mvn	r2, #0
 1842 0014 0020C3E5 		strb	r2, [r3, #0]
  52:../D8Led.c    **** }
 1843              		.loc 1 52 0
 1844 0018 0CD04BE2 		sub	sp, fp, #12
 1845 001c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1846 0020 1EFF2FE1 		bx	lr
 1847              		.cfi_endproc
 1848              	.LFE0:
 1850              		.align	2
 1851              		.global	D8Led_segment
 1853              	D8Led_segment:
 1854              	.LFB1:
  53:../D8Led.c    **** 
  54:../D8Led.c    **** void D8Led_segment(int value)
  55:../D8Led.c    **** {
 1855              		.loc 1 55 0
 1856              		.cfi_startproc
 1857              		@ Function supports interworking.
 1858              		@ args = 0, pretend = 0, frame = 8
 1859              		@ frame_needed = 1, uses_anonymous_args = 0
 1860 0024 0DC0A0E1 		mov	ip, sp
 1861              	.LCFI2:
 1862              		.cfi_def_cfa_register 12
 1863 0028 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1864 002c 04B04CE2 		sub	fp, ip, #4
 1865              		.cfi_offset 14, -8
 1866              		.cfi_offset 13, -12
 1867              		.cfi_offset 11, -16
 1868              	.LCFI3:
 1869              		.cfi_def_cfa 11, 4
 1870 0030 08D04DE2 		sub	sp, sp, #8
 1871 0034 10000BE5 		str	r0, [fp, #-16]
  56:../D8Led.c    **** 	if( (value >= 0) && (value < 8) ){
 1872              		.loc 1 56 0
 1873 0038 10301BE5 		ldr	r3, [fp, #-16]
 1874 003c 000053E3 		cmp	r3, #0
 1875 0040 0A0000BA 		blt	.L2
 1876              		.loc 1 56 0 is_stmt 0 discriminator 1
 1877 0044 10301BE5 		ldr	r3, [fp, #-16]
 1878 0048 070053E3 		cmp	r3, #7
 1879 004c 070000CA 		bgt	.L2
  57:../D8Led.c    **** 		LED8ADDR = ~Segments[value];
 1880              		.loc 1 57 0 is_stmt 1
 1881 0050 8537A0E3 		mov	r3, #34865152
 1882 0054 20209FE5 		ldr	r2, .L4
 1883 0058 10101BE5 		ldr	r1, [fp, #-16]
 1884 005c 012192E7 		ldr	r2, [r2, r1, asl #2]
 1885 0060 FF2002E2 		and	r2, r2, #255
 1886 0064 0220E0E1 		mvn	r2, r2
 1887 0068 FF2002E2 		and	r2, r2, #255
 1888 006c 0020C3E5 		strb	r2, [r3, #0]
 1889              	.L2:
  58:../D8Led.c    **** 	}
  59:../D8Led.c    **** 		//COMPLETAR: debemos escribir en el display (LED8ADDR) el valor
  60:../D8Led.c    **** 		//correcto para que se ilumine el segmento que está en la posición
  61:../D8Led.c    **** 		//value del array Segments. Hay que tener en cuenta que el display
  62:../D8Led.c    **** 		//usa lógica invertida (0 enciende, 1 apaga)
  63:../D8Led.c    **** 
  64:../D8Led.c    **** 
  65:../D8Led.c    **** }
 1890              		.loc 1 65 0
 1891 0070 0CD04BE2 		sub	sp, fp, #12
 1892 0074 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1893 0078 1EFF2FE1 		bx	lr
 1894              	.L5:
 1895              		.align	2
 1896              	.L4:
 1897 007c 00000000 		.word	Segments
 1898              		.cfi_endproc
 1899              	.LFE1:
 1901              		.align	2
 1902              		.global	D8Led_digit
 1904              	D8Led_digit:
 1905              	.LFB2:
  66:../D8Led.c    **** 
  67:../D8Led.c    **** void D8Led_digit(int value)
  68:../D8Led.c    **** {
 1906              		.loc 1 68 0
 1907              		.cfi_startproc
 1908              		@ Function supports interworking.
 1909              		@ args = 0, pretend = 0, frame = 8
 1910              		@ frame_needed = 1, uses_anonymous_args = 0
 1911 0080 0DC0A0E1 		mov	ip, sp
 1912              	.LCFI4:
 1913              		.cfi_def_cfa_register 12
 1914 0084 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1915 0088 04B04CE2 		sub	fp, ip, #4
 1916              		.cfi_offset 14, -8
 1917              		.cfi_offset 13, -12
 1918              		.cfi_offset 11, -16
 1919              	.LCFI5:
 1920              		.cfi_def_cfa 11, 4
 1921 008c 08D04DE2 		sub	sp, sp, #8
 1922 0090 10000BE5 		str	r0, [fp, #-16]
  69:../D8Led.c    **** 	if( (value >= 0) && (value < 16) ){
 1923              		.loc 1 69 0
 1924 0094 10301BE5 		ldr	r3, [fp, #-16]
 1925 0098 000053E3 		cmp	r3, #0
 1926 009c 0A0000BA 		blt	.L6
 1927              		.loc 1 69 0 is_stmt 0 discriminator 1
 1928 00a0 10301BE5 		ldr	r3, [fp, #-16]
 1929 00a4 0F0053E3 		cmp	r3, #15
 1930 00a8 070000CA 		bgt	.L6
  70:../D8Led.c    **** 		LED8ADDR = ~Digits[value];
 1931              		.loc 1 70 0 is_stmt 1
 1932 00ac 8537A0E3 		mov	r3, #34865152
 1933 00b0 20209FE5 		ldr	r2, .L8
 1934 00b4 10101BE5 		ldr	r1, [fp, #-16]
 1935 00b8 012192E7 		ldr	r2, [r2, r1, asl #2]
 1936 00bc FF2002E2 		and	r2, r2, #255
 1937 00c0 0220E0E1 		mvn	r2, r2
 1938 00c4 FF2002E2 		and	r2, r2, #255
 1939 00c8 0020C3E5 		strb	r2, [r3, #0]
 1940              	.L6:
  71:../D8Led.c    **** 	}
  72:../D8Led.c    **** 		//COMPLETAR: debemos escribir en el display (LED8ADDR) el valor
  73:../D8Led.c    **** 		// correcto para que se ilumine el dígito que está en la posición
  74:../D8Led.c    **** 		//value del array Digits. Hay que tener en cuenta que el display
  75:../D8Led.c    **** 		//usa lógica invertida (0 enciende, 1 apaga)
  76:../D8Led.c    **** 
  77:../D8Led.c    **** 
  78:../D8Led.c    **** }
 1941              		.loc 1 78 0
 1942 00cc 0CD04BE2 		sub	sp, fp, #12
 1943 00d0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1944 00d4 1EFF2FE1 		bx	lr
 1945              	.L9:
 1946              		.align	2
 1947              	.L8:
 1948 00d8 20000000 		.word	Digits
 1949              		.cfi_endproc
 1950              	.LFE2:
 1952              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 D8Led.c
C:\Users\USUARI~1\AppData\Local\Temp\ccpDOnUd.s:1786   .data:00000000 $d
C:\Users\USUARI~1\AppData\Local\Temp\ccpDOnUd.s:1789   .data:00000000 Segments
C:\Users\USUARI~1\AppData\Local\Temp\ccpDOnUd.s:1801   .data:00000020 Digits
C:\Users\USUARI~1\AppData\Local\Temp\ccpDOnUd.s:1819   .text:00000000 $a
C:\Users\USUARI~1\AppData\Local\Temp\ccpDOnUd.s:1822   .text:00000000 D8Led_init
C:\Users\USUARI~1\AppData\Local\Temp\ccpDOnUd.s:1853   .text:00000024 D8Led_segment
C:\Users\USUARI~1\AppData\Local\Temp\ccpDOnUd.s:1897   .text:0000007c $d
C:\Users\USUARI~1\AppData\Local\Temp\ccpDOnUd.s:1901   .text:00000080 $a
C:\Users\USUARI~1\AppData\Local\Temp\ccpDOnUd.s:1904   .text:00000080 D8Led_digit
C:\Users\USUARI~1\AppData\Local\Temp\ccpDOnUd.s:1948   .text:000000d8 $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
