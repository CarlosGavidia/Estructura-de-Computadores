   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"timer.c"
  21              	.Ltext0:
  22              		.file 1 "../timer.c"
 1701              		.align	2
 1702              		.global	tmr_set_prescaler
 1704              	tmr_set_prescaler:
 1705              	.LFB0:
   1:../timer.c    **** //Copiar código completo de la práctica 2
   2:../timer.c    **** //Copiar código completo de la práctica 2
   3:../timer.c    **** /*********************************************************************************************
   4:../timer.c    **** * Fichero:		timer.c
   5:../timer.c    **** 
   6:../timer.c    **** 
   7:../timer.c    **** * Descrip:		funciones de control del timer0 del s3c44b0x
   8:../timer.c    **** *********************************************************************************************/
   9:../timer.c    **** 
  10:../timer.c    **** /*--- ficheros de cabecera ---*/
  11:../timer.c    **** #include "44b.h"
  12:../timer.c    **** #include "timer.h"
  13:../timer.c    **** 
  14:../timer.c    **** int tmr_set_prescaler(int p, int  value)
  15:../timer.c    **** {
 1706              		.loc 1 15 0
 1707              		.cfi_startproc
 1708              		@ Function supports interworking.
 1709              		@ args = 0, pretend = 0, frame = 16
 1710              		@ frame_needed = 1, uses_anonymous_args = 0
 1711 0000 0DC0A0E1 		mov	ip, sp
 1712              	.LCFI0:
 1713              		.cfi_def_cfa_register 12
 1714 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1715 0008 04B04CE2 		sub	fp, ip, #4
 1716              		.cfi_offset 14, -8
 1717              		.cfi_offset 13, -12
 1718              		.cfi_offset 11, -16
 1719              	.LCFI1:
 1720              		.cfi_def_cfa 11, 4
 1721 000c 10D04DE2 		sub	sp, sp, #16
 1722 0010 18000BE5 		str	r0, [fp, #-24]
 1723 0014 1C100BE5 		str	r1, [fp, #-28]
  16:../timer.c    **** 	int offset = p*4;
 1724              		.loc 1 16 0
 1725 0018 18301BE5 		ldr	r3, [fp, #-24]
 1726 001c 0331A0E1 		mov	r3, r3, asl #2
 1727 0020 10300BE5 		str	r3, [fp, #-16]
  17:../timer.c    **** 		if (p==1 || p==3 || p==5)
 1728              		.loc 1 17 0
 1729 0024 18301BE5 		ldr	r3, [fp, #-24]
 1730 0028 010053E3 		cmp	r3, #1
 1731 002c 0500000A 		beq	.L2
 1732              		.loc 1 17 0 is_stmt 0 discriminator 1
 1733 0030 18301BE5 		ldr	r3, [fp, #-24]
 1734 0034 030053E3 		cmp	r3, #3
 1735 0038 0200000A 		beq	.L2
 1736 003c 18301BE5 		ldr	r3, [fp, #-24]
 1737 0040 050053E3 		cmp	r3, #5
 1738 0044 0200001A 		bne	.L3
 1739              	.L2:
  18:../timer.c    **** 			offset=offset-4;
 1740              		.loc 1 18 0 is_stmt 1
 1741 0048 10301BE5 		ldr	r3, [fp, #-16]
 1742 004c 043043E2 		sub	r3, r3, #4
 1743 0050 10300BE5 		str	r3, [fp, #-16]
 1744              	.L3:
  19:../timer.c    **** 
  20:../timer.c    **** 	value &= 0xFF;
 1745              		.loc 1 20 0
 1746 0054 1C301BE5 		ldr	r3, [fp, #-28]
 1747 0058 FF3003E2 		and	r3, r3, #255
 1748 005c 1C300BE5 		str	r3, [fp, #-28]
  21:../timer.c    **** 
  22:../timer.c    **** 	if (p < 0 || p > 5)
 1749              		.loc 1 22 0
 1750 0060 18301BE5 		ldr	r3, [fp, #-24]
 1751 0064 000053E3 		cmp	r3, #0
 1752 0068 020000BA 		blt	.L4
 1753              		.loc 1 22 0 is_stmt 0 discriminator 1
 1754 006c 18301BE5 		ldr	r3, [fp, #-24]
 1755 0070 050053E3 		cmp	r3, #5
 1756 0074 010000DA 		ble	.L5
 1757              	.L4:
  23:../timer.c    **** 		return -1;
 1758              		.loc 1 23 0 is_stmt 1
 1759 0078 0030E0E3 		mvn	r3, #0
 1760 007c 110000EA 		b	.L6
 1761              	.L5:
  24:../timer.c    **** 
  25:../timer.c    **** 	rTCFG0 &=~ (value << offset);
 1762              		.loc 1 25 0
 1763 0080 50309FE5 		ldr	r3, .L7
 1764 0084 4C209FE5 		ldr	r2, .L7
 1765 0088 001092E5 		ldr	r1, [r2, #0]
 1766 008c 1C001BE5 		ldr	r0, [fp, #-28]
 1767 0090 10201BE5 		ldr	r2, [fp, #-16]
 1768 0094 1022A0E1 		mov	r2, r0, asl r2
 1769 0098 0220E0E1 		mvn	r2, r2
 1770 009c 022001E0 		and	r2, r1, r2
 1771 00a0 002083E5 		str	r2, [r3, #0]
  26:../timer.c    **** 	rTCFG0 |= (value << offset);
 1772              		.loc 1 26 0
 1773 00a4 2C309FE5 		ldr	r3, .L7
 1774 00a8 28209FE5 		ldr	r2, .L7
 1775 00ac 001092E5 		ldr	r1, [r2, #0]
 1776 00b0 1C001BE5 		ldr	r0, [fp, #-28]
 1777 00b4 10201BE5 		ldr	r2, [fp, #-16]
 1778 00b8 1022A0E1 		mov	r2, r0, asl r2
 1779 00bc 022081E1 		orr	r2, r1, r2
 1780 00c0 002083E5 		str	r2, [r3, #0]
  27:../timer.c    **** 
  28:../timer.c    **** 
  29:../timer.c    **** 	//COMPLETAR: escribir el valor value a partir de la posición offset en el
  30:../timer.c    **** 	//registro rTCFG0, para establecer el valor de pre-escalado del módulo p
  31:../timer.c    **** 	//value es el valor de prescalado y p es el número del TIMER
  32:../timer.c    **** 
  33:../timer.c    **** 
  34:../timer.c    **** 	return 0;
 1781              		.loc 1 34 0
 1782 00c4 0030A0E3 		mov	r3, #0
 1783              	.L6:
  35:../timer.c    **** }
 1784              		.loc 1 35 0
 1785 00c8 0300A0E1 		mov	r0, r3
 1786 00cc 0CD04BE2 		sub	sp, fp, #12
 1787 00d0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1788 00d4 1EFF2FE1 		bx	lr
 1789              	.L8:
 1790              		.align	2
 1791              	.L7:
 1792 00d8 0000D501 		.word	30736384
 1793              		.cfi_endproc
 1794              	.LFE0:
 1796              		.align	2
 1797              		.global	tmr_set_divider
 1799              	tmr_set_divider:
 1800              	.LFB1:
  36:../timer.c    **** 
  37:../timer.c    **** int tmr_set_divider(int d, enum tmr_div div)
  38:../timer.c    **** {
 1801              		.loc 1 38 0
 1802              		.cfi_startproc
 1803              		@ Function supports interworking.
 1804              		@ args = 0, pretend = 0, frame = 16
 1805              		@ frame_needed = 1, uses_anonymous_args = 0
 1806 00dc 0DC0A0E1 		mov	ip, sp
 1807              	.LCFI2:
 1808              		.cfi_def_cfa_register 12
 1809 00e0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1810 00e4 04B04CE2 		sub	fp, ip, #4
 1811              		.cfi_offset 14, -8
 1812              		.cfi_offset 13, -12
 1813              		.cfi_offset 11, -16
 1814              	.LCFI3:
 1815              		.cfi_def_cfa 11, 4
 1816 00e8 10D04DE2 		sub	sp, sp, #16
 1817 00ec 18000BE5 		str	r0, [fp, #-24]
 1818 00f0 0130A0E1 		mov	r3, r1
 1819 00f4 19304BE5 		strb	r3, [fp, #-25]
  39:../timer.c    **** 	int ret = 0;
 1820              		.loc 1 39 0
 1821 00f8 0030A0E3 		mov	r3, #0
 1822 00fc 10300BE5 		str	r3, [fp, #-16]
  40:../timer.c    **** 	int pos = d*4;
 1823              		.loc 1 40 0
 1824 0100 18301BE5 		ldr	r3, [fp, #-24]
 1825 0104 0331A0E1 		mov	r3, r3, asl #2
 1826 0108 14300BE5 		str	r3, [fp, #-20]
  41:../timer.c    **** 
  42:../timer.c    **** 	if ((d < 0 || d > 5) ||
 1827              		.loc 1 42 0
 1828 010c 18301BE5 		ldr	r3, [fp, #-24]
 1829 0110 000053E3 		cmp	r3, #0
 1830 0114 140000BA 		blt	.L10
 1831              		.loc 1 42 0 is_stmt 0 discriminator 1
 1832 0118 18301BE5 		ldr	r3, [fp, #-24]
 1833 011c 050053E3 		cmp	r3, #5
 1834 0120 110000CA 		bgt	.L10
 1835 0124 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 1836 0128 040053E3 		cmp	r3, #4
 1837 012c 0200001A 		bne	.L11
  43:../timer.c    **** 			(div == D1_32 && d > 3) ||
 1838              		.loc 1 43 0 is_stmt 1
 1839 0130 18301BE5 		ldr	r3, [fp, #-24]
 1840 0134 030053E3 		cmp	r3, #3
 1841 0138 0B0000CA 		bgt	.L10
 1842              	.L11:
 1843              		.loc 1 43 0 is_stmt 0 discriminator 1
 1844 013c 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 1845 0140 050053E3 		cmp	r3, #5
 1846 0144 0200001A 		bne	.L12
  44:../timer.c    **** 			(div == EXTCLK && d != 5) ||
 1847              		.loc 1 44 0 is_stmt 1
 1848 0148 18301BE5 		ldr	r3, [fp, #-24]
 1849 014c 050053E3 		cmp	r3, #5
 1850 0150 0500001A 		bne	.L10
 1851              	.L12:
 1852              		.loc 1 44 0 is_stmt 0 discriminator 1
 1853 0154 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 1854 0158 060053E3 		cmp	r3, #6
 1855 015c 0400001A 		bne	.L13
  45:../timer.c    **** 			(div == TCLK && d != 4))
 1856              		.loc 1 45 0 is_stmt 1
 1857 0160 18301BE5 		ldr	r3, [fp, #-24]
 1858 0164 040053E3 		cmp	r3, #4
 1859 0168 0100000A 		beq	.L13
 1860              	.L10:
  46:../timer.c    **** 		return -1;
 1861              		.loc 1 46 0
 1862 016c 0030E0E3 		mvn	r3, #0
 1863 0170 190000EA 		b	.L14
 1864              	.L13:
  47:../timer.c    **** 
  48:../timer.c    **** 	if (div == EXTCLK || div == TCLK)
 1865              		.loc 1 48 0
 1866 0174 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 1867 0178 050053E3 		cmp	r3, #5
 1868 017c 0200000A 		beq	.L15
 1869              		.loc 1 48 0 is_stmt 0 discriminator 1
 1870 0180 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 1871 0184 060053E3 		cmp	r3, #6
 1872 0188 0100001A 		bne	.L16
 1873              	.L15:
  49:../timer.c    **** 		div = 4;
 1874              		.loc 1 49 0 is_stmt 1
 1875 018c 0430A0E3 		mov	r3, #4
 1876 0190 19304BE5 		strb	r3, [fp, #-25]
 1877              	.L16:
  50:../timer.c    **** 
  51:../timer.c    **** 	//COMPLETAR: escribir el valor div a partir de la posición pos en el
  52:../timer.c    **** 	//registro rTCFG1 para establecer el valor para el divisor d
  53:../timer.c    **** 	rTCFG1 &=~(0x7 << pos);
 1878              		.loc 1 53 0
 1879 0194 50309FE5 		ldr	r3, .L17
 1880 0198 4C209FE5 		ldr	r2, .L17
 1881 019c 001092E5 		ldr	r1, [r2, #0]
 1882 01a0 0700A0E3 		mov	r0, #7
 1883 01a4 14201BE5 		ldr	r2, [fp, #-20]
 1884 01a8 1022A0E1 		mov	r2, r0, asl r2
 1885 01ac 0220E0E1 		mvn	r2, r2
 1886 01b0 022001E0 		and	r2, r1, r2
 1887 01b4 002083E5 		str	r2, [r3, #0]
  54:../timer.c    **** 	rTCFG1 |= (div << pos);
 1888              		.loc 1 54 0
 1889 01b8 2C309FE5 		ldr	r3, .L17
 1890 01bc 28209FE5 		ldr	r2, .L17
 1891 01c0 001092E5 		ldr	r1, [r2, #0]
 1892 01c4 19005BE5 		ldrb	r0, [fp, #-25]	@ zero_extendqisi2
 1893 01c8 14201BE5 		ldr	r2, [fp, #-20]
 1894 01cc 1022A0E1 		mov	r2, r0, asl r2
 1895 01d0 022081E1 		orr	r2, r1, r2
 1896 01d4 002083E5 		str	r2, [r3, #0]
  55:../timer.c    **** 
  56:../timer.c    **** 	return 0;
 1897              		.loc 1 56 0
 1898 01d8 0030A0E3 		mov	r3, #0
 1899              	.L14:
  57:../timer.c    **** }
 1900              		.loc 1 57 0
 1901 01dc 0300A0E1 		mov	r0, r3
 1902 01e0 0CD04BE2 		sub	sp, fp, #12
 1903 01e4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1904 01e8 1EFF2FE1 		bx	lr
 1905              	.L18:
 1906              		.align	2
 1907              	.L17:
 1908 01ec 0400D501 		.word	30736388
 1909              		.cfi_endproc
 1910              	.LFE1:
 1912              		.align	2
 1913              		.global	tmr_set_count
 1915              	tmr_set_count:
 1916              	.LFB2:
  58:../timer.c    **** 
  59:../timer.c    **** int tmr_set_count(enum tmr_timer t, int count, int cmp)
  60:../timer.c    **** {
 1917              		.loc 1 60 0
 1918              		.cfi_startproc
 1919              		@ Function supports interworking.
 1920              		@ args = 0, pretend = 0, frame = 24
 1921              		@ frame_needed = 1, uses_anonymous_args = 0
 1922 01f0 0DC0A0E1 		mov	ip, sp
 1923              	.LCFI4:
 1924              		.cfi_def_cfa_register 12
 1925 01f4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1926 01f8 04B04CE2 		sub	fp, ip, #4
 1927              		.cfi_offset 14, -8
 1928              		.cfi_offset 13, -12
 1929              		.cfi_offset 11, -16
 1930              	.LCFI5:
 1931              		.cfi_def_cfa 11, 4
 1932 01fc 18D04DE2 		sub	sp, sp, #24
 1933 0200 0030A0E1 		mov	r3, r0
 1934 0204 1C100BE5 		str	r1, [fp, #-28]
 1935 0208 20200BE5 		str	r2, [fp, #-32]
 1936 020c 15304BE5 		strb	r3, [fp, #-21]
  61:../timer.c    **** 	int err = 0;
 1937              		.loc 1 61 0
 1938 0210 0030A0E3 		mov	r3, #0
 1939 0214 10300BE5 		str	r3, [fp, #-16]
  62:../timer.c    **** 	switch (t) {
 1940              		.loc 1 62 0
 1941 0218 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 1942 021c 050053E3 		cmp	r3, #5
 1943 0220 03F19F97 		ldrls	pc, [pc, r3, asl #2]
 1944 0224 2C0000EA 		b	.L20
 1945              	.L27:
 1946 0228 40020000 		.word	.L21
 1947 022c 5C020000 		.word	.L22
 1948 0230 78020000 		.word	.L23
 1949 0234 94020000 		.word	.L24
 1950 0238 B0020000 		.word	.L25
 1951 023c CC020000 		.word	.L26
 1952              	.L21:
  63:../timer.c    **** 		case TIMER0:
  64:../timer.c    **** 			//COMPLETAR: establecer el valor de cuenta count y el valor de
  65:../timer.c    **** 			//comparación cmp en los registros de buffer del timer0 (rTCNTB0 y
  66:../timer.c    **** 			//rTCMPB0)
  67:../timer.c    **** 			rTCNTB0 = count;
 1953              		.loc 1 67 0
 1954 0240 B0309FE5 		ldr	r3, .L29
 1955 0244 1C201BE5 		ldr	r2, [fp, #-28]
 1956 0248 002083E5 		str	r2, [r3, #0]
  68:../timer.c    **** 			rTCMPB0 = cmp;
 1957              		.loc 1 68 0
 1958 024c A8309FE5 		ldr	r3, .L29+4
 1959 0250 20201BE5 		ldr	r2, [fp, #-32]
 1960 0254 002083E5 		str	r2, [r3, #0]
  69:../timer.c    **** 
  70:../timer.c    **** 			 break;
 1961              		.loc 1 70 0
 1962 0258 210000EA 		b	.L28
 1963              	.L22:
  71:../timer.c    **** 		case TIMER1:
  72:../timer.c    **** 			//COMPLETAR: establecer el valor de cuenta count y el valor de
  73:../timer.c    **** 			//comparación cmp en los registros de buffer del timer1 (rTCNTB1 y
  74:../timer.c    **** 			//rTCMPB1)
  75:../timer.c    **** 			rTCNTB1 = count;
 1964              		.loc 1 75 0
 1965 025c 9C309FE5 		ldr	r3, .L29+8
 1966 0260 1C201BE5 		ldr	r2, [fp, #-28]
 1967 0264 002083E5 		str	r2, [r3, #0]
  76:../timer.c    **** 			rTCMPB1 = cmp;
 1968              		.loc 1 76 0
 1969 0268 94309FE5 		ldr	r3, .L29+12
 1970 026c 20201BE5 		ldr	r2, [fp, #-32]
 1971 0270 002083E5 		str	r2, [r3, #0]
  77:../timer.c    **** 			 break;
 1972              		.loc 1 77 0
 1973 0274 1A0000EA 		b	.L28
 1974              	.L23:
  78:../timer.c    **** 		case TIMER2:
  79:../timer.c    **** 			//COMPLETAR: establecer el valor de cuenta count y el valor de
  80:../timer.c    **** 			//comparación cmp en los registros de buffer del timer2 (rTCNTB2 y
  81:../timer.c    **** 			//rTCMPB2)
  82:../timer.c    **** 			rTCNTB2 = count;
 1975              		.loc 1 82 0
 1976 0278 88309FE5 		ldr	r3, .L29+16
 1977 027c 1C201BE5 		ldr	r2, [fp, #-28]
 1978 0280 002083E5 		str	r2, [r3, #0]
  83:../timer.c    **** 			rTCMPB2 = cmp;
 1979              		.loc 1 83 0
 1980 0284 80309FE5 		ldr	r3, .L29+20
 1981 0288 20201BE5 		ldr	r2, [fp, #-32]
 1982 028c 002083E5 		str	r2, [r3, #0]
  84:../timer.c    **** 			 break;
 1983              		.loc 1 84 0
 1984 0290 130000EA 		b	.L28
 1985              	.L24:
  85:../timer.c    **** 		case TIMER3:
  86:../timer.c    **** 			//COMPLETAR: establecer el valor de cuenta count y el valor de
  87:../timer.c    **** 			//comparaciónn cmp en los registros de buffer del timer3 (rTCNTB3 y
  88:../timer.c    **** 			//rTCMPB3)
  89:../timer.c    **** 			rTCNTB3 = count;
 1986              		.loc 1 89 0
 1987 0294 74309FE5 		ldr	r3, .L29+24
 1988 0298 1C201BE5 		ldr	r2, [fp, #-28]
 1989 029c 002083E5 		str	r2, [r3, #0]
  90:../timer.c    **** 			rTCMPB3 = cmp;
 1990              		.loc 1 90 0
 1991 02a0 6C309FE5 		ldr	r3, .L29+28
 1992 02a4 20201BE5 		ldr	r2, [fp, #-32]
 1993 02a8 002083E5 		str	r2, [r3, #0]
  91:../timer.c    **** 			 break;
 1994              		.loc 1 91 0
 1995 02ac 0C0000EA 		b	.L28
 1996              	.L25:
  92:../timer.c    **** 		case TIMER4:
  93:../timer.c    **** 			//COMPLETAR: establecer el valor de cuenta count y el valor de
  94:../timer.c    **** 			//comparación cmp en los registros de buffer del timer4 (rTCNTB4 y
  95:../timer.c    **** 			//rTCMPB4)
  96:../timer.c    **** 			rTCNTB4 = count;
 1997              		.loc 1 96 0
 1998 02b0 60309FE5 		ldr	r3, .L29+32
 1999 02b4 1C201BE5 		ldr	r2, [fp, #-28]
 2000 02b8 002083E5 		str	r2, [r3, #0]
  97:../timer.c    **** 			rTCMPB4 = cmp;
 2001              		.loc 1 97 0
 2002 02bc 58309FE5 		ldr	r3, .L29+36
 2003 02c0 20201BE5 		ldr	r2, [fp, #-32]
 2004 02c4 002083E5 		str	r2, [r3, #0]
  98:../timer.c    **** 			 break;
 2005              		.loc 1 98 0
 2006 02c8 050000EA 		b	.L28
 2007              	.L26:
  99:../timer.c    **** 		case TIMER5:
 100:../timer.c    **** 			//COMPLETAR: establecer el valor de cuenta count
 101:../timer.c    **** 			//en el registro de buffer del timer5 (rTCNTB5)
 102:../timer.c    **** 			rTCNTB5 = count;
 2008              		.loc 1 102 0
 2009 02cc 4C309FE5 		ldr	r3, .L29+40
 2010 02d0 1C201BE5 		ldr	r2, [fp, #-28]
 2011 02d4 002083E5 		str	r2, [r3, #0]
 103:../timer.c    **** 
 104:../timer.c    **** 			 break;
 2012              		.loc 1 104 0
 2013 02d8 010000EA 		b	.L28
 2014              	.L20:
 105:../timer.c    **** 		default:
 106:../timer.c    **** 			err = -1;
 2015              		.loc 1 106 0
 2016 02dc 0030E0E3 		mvn	r3, #0
 2017 02e0 10300BE5 		str	r3, [fp, #-16]
 2018              	.L28:
 107:../timer.c    **** 	}
 108:../timer.c    **** 
 109:../timer.c    **** 	return err;
 2019              		.loc 1 109 0
 2020 02e4 10301BE5 		ldr	r3, [fp, #-16]
 110:../timer.c    **** }
 2021              		.loc 1 110 0
 2022 02e8 0300A0E1 		mov	r0, r3
 2023 02ec 0CD04BE2 		sub	sp, fp, #12
 2024 02f0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2025 02f4 1EFF2FE1 		bx	lr
 2026              	.L30:
 2027              		.align	2
 2028              	.L29:
 2029 02f8 0C00D501 		.word	30736396
 2030 02fc 1000D501 		.word	30736400
 2031 0300 1800D501 		.word	30736408
 2032 0304 1C00D501 		.word	30736412
 2033 0308 2400D501 		.word	30736420
 2034 030c 2800D501 		.word	30736424
 2035 0310 3000D501 		.word	30736432
 2036 0314 3400D501 		.word	30736436
 2037 0318 3C00D501 		.word	30736444
 2038 031c 4000D501 		.word	30736448
 2039 0320 4800D501 		.word	30736456
 2040              		.cfi_endproc
 2041              	.LFE2:
 2043              		.align	2
 2044              		.global	tmr_update
 2046              	tmr_update:
 2047              	.LFB3:
 111:../timer.c    **** 
 112:../timer.c    **** int tmr_update(enum tmr_timer t)
 113:../timer.c    **** {
 2048              		.loc 1 113 0
 2049              		.cfi_startproc
 2050              		@ Function supports interworking.
 2051              		@ args = 0, pretend = 0, frame = 16
 2052              		@ frame_needed = 1, uses_anonymous_args = 0
 2053 0324 0DC0A0E1 		mov	ip, sp
 2054              	.LCFI6:
 2055              		.cfi_def_cfa_register 12
 2056 0328 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2057 032c 04B04CE2 		sub	fp, ip, #4
 2058              		.cfi_offset 14, -8
 2059              		.cfi_offset 13, -12
 2060              		.cfi_offset 11, -16
 2061              	.LCFI7:
 2062              		.cfi_def_cfa 11, 4
 2063 0330 10D04DE2 		sub	sp, sp, #16
 2064 0334 0030A0E1 		mov	r3, r0
 2065 0338 15304BE5 		strb	r3, [fp, #-21]
 114:../timer.c    **** 	int pos = t*4;
 2066              		.loc 1 114 0
 2067 033c 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2068 0340 0331A0E1 		mov	r3, r3, asl #2
 2069 0344 10300BE5 		str	r3, [fp, #-16]
 115:../timer.c    **** 	if (t > 0)
 2070              		.loc 1 115 0
 2071 0348 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2072 034c 000053E3 		cmp	r3, #0
 2073 0350 0200000A 		beq	.L32
 116:../timer.c    **** 		pos += 4;
 2074              		.loc 1 116 0
 2075 0354 10301BE5 		ldr	r3, [fp, #-16]
 2076 0358 043083E2 		add	r3, r3, #4
 2077 035c 10300BE5 		str	r3, [fp, #-16]
 2078              	.L32:
 117:../timer.c    **** 
 118:../timer.c    **** 	if (t < 0 || t > 5)
 2079              		.loc 1 118 0
 2080 0360 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2081 0364 050053E3 		cmp	r3, #5
 2082 0368 0100009A 		bls	.L33
 119:../timer.c    **** 		return -1;
 2083              		.loc 1 119 0
 2084 036c 0030E0E3 		mvn	r3, #0
 2085 0370 130000EA 		b	.L34
 2086              	.L33:
 120:../timer.c    **** 
 121:../timer.c    **** 	//COMPLETAR: Dar el valor adecuado al bit manual update del registro rTCON
 122:../timer.c    **** 	//a partir de la posición pos (segundo bit a partir de esta posición)
 123:../timer.c    **** 	// primero para actualizar los registros rTCNTBn y rTCMPBn
 124:../timer.c    **** 	//después para ponerlo en modo no operación
 125:../timer.c    **** 	//deben ser stores distintos, lo hacemos con sentencias C distintas
 126:../timer.c    **** 
 127:../timer.c    **** 
 128:../timer.c    **** 	rTCON |= (0x1 << pos+1);
 2087              		.loc 1 128 0
 2088 0374 58309FE5 		ldr	r3, .L35
 2089 0378 54209FE5 		ldr	r2, .L35
 2090 037c 001092E5 		ldr	r1, [r2, #0]
 2091 0380 10201BE5 		ldr	r2, [fp, #-16]
 2092 0384 012082E2 		add	r2, r2, #1
 2093 0388 0100A0E3 		mov	r0, #1
 2094 038c 1022A0E1 		mov	r2, r0, asl r2
 2095 0390 022081E1 		orr	r2, r1, r2
 2096 0394 002083E5 		str	r2, [r3, #0]
 129:../timer.c    **** 	rTCON &=~( 0x1 << pos+1);
 2097              		.loc 1 129 0
 2098 0398 34309FE5 		ldr	r3, .L35
 2099 039c 30209FE5 		ldr	r2, .L35
 2100 03a0 001092E5 		ldr	r1, [r2, #0]
 2101 03a4 10201BE5 		ldr	r2, [fp, #-16]
 2102 03a8 012082E2 		add	r2, r2, #1
 2103 03ac 0100A0E3 		mov	r0, #1
 2104 03b0 1022A0E1 		mov	r2, r0, asl r2
 2105 03b4 0220E0E1 		mvn	r2, r2
 2106 03b8 022001E0 		and	r2, r1, r2
 2107 03bc 002083E5 		str	r2, [r3, #0]
 130:../timer.c    **** 
 131:../timer.c    **** 	return 0;
 2108              		.loc 1 131 0
 2109 03c0 0030A0E3 		mov	r3, #0
 2110              	.L34:
 132:../timer.c    **** }
 2111              		.loc 1 132 0
 2112 03c4 0300A0E1 		mov	r0, r3
 2113 03c8 0CD04BE2 		sub	sp, fp, #12
 2114 03cc 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2115 03d0 1EFF2FE1 		bx	lr
 2116              	.L36:
 2117              		.align	2
 2118              	.L35:
 2119 03d4 0800D501 		.word	30736392
 2120              		.cfi_endproc
 2121              	.LFE3:
 2123              		.align	2
 2124              		.global	tmr_set_mode
 2126              	tmr_set_mode:
 2127              	.LFB4:
 133:../timer.c    **** 
 134:../timer.c    **** int tmr_set_mode(enum tmr_timer t, enum tmr_mode mode)
 135:../timer.c    **** {
 2128              		.loc 1 135 0
 2129              		.cfi_startproc
 2130              		@ Function supports interworking.
 2131              		@ args = 0, pretend = 0, frame = 16
 2132              		@ frame_needed = 1, uses_anonymous_args = 0
 2133 03d8 0DC0A0E1 		mov	ip, sp
 2134              	.LCFI8:
 2135              		.cfi_def_cfa_register 12
 2136 03dc 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2137 03e0 04B04CE2 		sub	fp, ip, #4
 2138              		.cfi_offset 14, -8
 2139              		.cfi_offset 13, -12
 2140              		.cfi_offset 11, -16
 2141              	.LCFI9:
 2142              		.cfi_def_cfa 11, 4
 2143 03e4 10D04DE2 		sub	sp, sp, #16
 2144 03e8 0020A0E1 		mov	r2, r0
 2145 03ec 0130A0E1 		mov	r3, r1
 2146 03f0 15204BE5 		strb	r2, [fp, #-21]
 2147 03f4 16304BE5 		strb	r3, [fp, #-22]
 136:../timer.c    **** 	int err = 0;
 2148              		.loc 1 136 0
 2149 03f8 0030A0E3 		mov	r3, #0
 2150 03fc 10300BE5 		str	r3, [fp, #-16]
 137:../timer.c    **** 	int pos = t*4;
 2151              		.loc 1 137 0
 2152 0400 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2153 0404 0331A0E1 		mov	r3, r3, asl #2
 2154 0408 14300BE5 		str	r3, [fp, #-20]
 138:../timer.c    **** 	if (t > 0)
 2155              		.loc 1 138 0
 2156 040c 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2157 0410 000053E3 		cmp	r3, #0
 2158 0414 0200000A 		beq	.L38
 139:../timer.c    **** 		pos += 4;
 2159              		.loc 1 139 0
 2160 0418 14301BE5 		ldr	r3, [fp, #-20]
 2161 041c 043083E2 		add	r3, r3, #4
 2162 0420 14300BE5 		str	r3, [fp, #-20]
 2163              	.L38:
 140:../timer.c    **** 
 141:../timer.c    **** 	if (t < 0 || t > 5)
 2164              		.loc 1 141 0
 2165 0424 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2166 0428 050053E3 		cmp	r3, #5
 2167 042c 0100009A 		bls	.L39
 142:../timer.c    **** 		return -1;
 2168              		.loc 1 142 0
 2169 0430 0030E0E3 		mvn	r3, #0
 2170 0434 1D0000EA 		b	.L40
 2171              	.L39:
 143:../timer.c    **** 
 144:../timer.c    **** 	if (mode == ONE_SHOT)
 2172              		.loc 1 144 0
 2173 0438 16305BE5 		ldrb	r3, [fp, #-22]	@ zero_extendqisi2
 2174 043c 000053E3 		cmp	r3, #0
 2175 0440 0A00001A 		bne	.L41
 145:../timer.c    **** 		//COMPLETAR: poner a 0 el bit autoreload de rTCON a partir de la posición pos (es
 146:../timer.c    **** 		//el cuarto bit a partir de esa posición)
 147:../timer.c    **** 		rTCON &=~ (0x1 << pos+3);
 2176              		.loc 1 147 0
 2177 0444 74309FE5 		ldr	r3, .L44
 2178 0448 70209FE5 		ldr	r2, .L44
 2179 044c 001092E5 		ldr	r1, [r2, #0]
 2180 0450 14201BE5 		ldr	r2, [fp, #-20]
 2181 0454 032082E2 		add	r2, r2, #3
 2182 0458 0100A0E3 		mov	r0, #1
 2183 045c 1022A0E1 		mov	r2, r0, asl r2
 2184 0460 0220E0E1 		mvn	r2, r2
 2185 0464 022001E0 		and	r2, r1, r2
 2186 0468 002083E5 		str	r2, [r3, #0]
 2187 046c 0E0000EA 		b	.L42
 2188              	.L41:
 148:../timer.c    **** 
 149:../timer.c    **** 
 150:../timer.c    **** 	else if (mode == RELOAD){
 2189              		.loc 1 150 0
 2190 0470 16305BE5 		ldrb	r3, [fp, #-22]	@ zero_extendqisi2
 2191 0474 010053E3 		cmp	r3, #1
 2192 0478 0900001A 		bne	.L43
 151:../timer.c    **** 		//COMPLETAR: poner a 1 el bit autoreload a partir de la posición pos (es
 152:../timer.c    **** 		//el cuarto bit a partir de esa posición)
 153:../timer.c    **** 		rTCON |= (0x1 << pos +3);
 2193              		.loc 1 153 0
 2194 047c 3C309FE5 		ldr	r3, .L44
 2195 0480 38209FE5 		ldr	r2, .L44
 2196 0484 001092E5 		ldr	r1, [r2, #0]
 2197 0488 14201BE5 		ldr	r2, [fp, #-20]
 2198 048c 032082E2 		add	r2, r2, #3
 2199 0490 0100A0E3 		mov	r0, #1
 2200 0494 1022A0E1 		mov	r2, r0, asl r2
 2201 0498 022081E1 		orr	r2, r1, r2
 2202 049c 002083E5 		str	r2, [r3, #0]
 2203 04a0 010000EA 		b	.L42
 2204              	.L43:
 154:../timer.c    **** 	}
 155:../timer.c    **** 	else
 156:../timer.c    **** 		err = -1;
 2205              		.loc 1 156 0
 2206 04a4 0030E0E3 		mvn	r3, #0
 2207 04a8 10300BE5 		str	r3, [fp, #-16]
 2208              	.L42:
 157:../timer.c    **** 
 158:../timer.c    **** 	return err;
 2209              		.loc 1 158 0
 2210 04ac 10301BE5 		ldr	r3, [fp, #-16]
 2211              	.L40:
 159:../timer.c    **** }
 2212              		.loc 1 159 0
 2213 04b0 0300A0E1 		mov	r0, r3
 2214 04b4 0CD04BE2 		sub	sp, fp, #12
 2215 04b8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2216 04bc 1EFF2FE1 		bx	lr
 2217              	.L45:
 2218              		.align	2
 2219              	.L44:
 2220 04c0 0800D501 		.word	30736392
 2221              		.cfi_endproc
 2222              	.LFE4:
 2224              		.align	2
 2225              		.global	tmr_start
 2227              	tmr_start:
 2228              	.LFB5:
 160:../timer.c    **** 
 161:../timer.c    **** int tmr_start(enum tmr_timer t)
 162:../timer.c    **** {
 2229              		.loc 1 162 0
 2230              		.cfi_startproc
 2231              		@ Function supports interworking.
 2232              		@ args = 0, pretend = 0, frame = 16
 2233              		@ frame_needed = 1, uses_anonymous_args = 0
 2234 04c4 0DC0A0E1 		mov	ip, sp
 2235              	.LCFI10:
 2236              		.cfi_def_cfa_register 12
 2237 04c8 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2238 04cc 04B04CE2 		sub	fp, ip, #4
 2239              		.cfi_offset 14, -8
 2240              		.cfi_offset 13, -12
 2241              		.cfi_offset 11, -16
 2242              	.LCFI11:
 2243              		.cfi_def_cfa 11, 4
 2244 04d0 10D04DE2 		sub	sp, sp, #16
 2245 04d4 0030A0E1 		mov	r3, r0
 2246 04d8 15304BE5 		strb	r3, [fp, #-21]
 163:../timer.c    **** 	int pos = t*4;
 2247              		.loc 1 163 0
 2248 04dc 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2249 04e0 0331A0E1 		mov	r3, r3, asl #2
 2250 04e4 10300BE5 		str	r3, [fp, #-16]
 164:../timer.c    **** 	if (t > 0)
 2251              		.loc 1 164 0
 2252 04e8 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2253 04ec 000053E3 		cmp	r3, #0
 2254 04f0 0200000A 		beq	.L47
 165:../timer.c    **** 		pos += 4;
 2255              		.loc 1 165 0
 2256 04f4 10301BE5 		ldr	r3, [fp, #-16]
 2257 04f8 043083E2 		add	r3, r3, #4
 2258 04fc 10300BE5 		str	r3, [fp, #-16]
 2259              	.L47:
 166:../timer.c    **** 
 167:../timer.c    **** 	if (t < 0 || t > 5)
 2260              		.loc 1 167 0
 2261 0500 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2262 0504 050053E3 		cmp	r3, #5
 2263 0508 0100009A 		bls	.L48
 168:../timer.c    **** 		return -1;
 2264              		.loc 1 168 0
 2265 050c 0030E0E3 		mvn	r3, #0
 2266 0510 080000EA 		b	.L49
 2267              	.L48:
 169:../timer.c    **** 
 170:../timer.c    **** 	//COMPLETAR: Dar el valor adecuado al bit de start para arrancar el TIMER a partir de la posición 
 171:../timer.c    **** 	//registro rTCON (es el primer bit del grupo)
 172:../timer.c    **** 	rTCON |= (0x1 << pos);
 2268              		.loc 1 172 0
 2269 0514 2C309FE5 		ldr	r3, .L50
 2270 0518 28209FE5 		ldr	r2, .L50
 2271 051c 001092E5 		ldr	r1, [r2, #0]
 2272 0520 0100A0E3 		mov	r0, #1
 2273 0524 10201BE5 		ldr	r2, [fp, #-16]
 2274 0528 1022A0E1 		mov	r2, r0, asl r2
 2275 052c 022081E1 		orr	r2, r1, r2
 2276 0530 002083E5 		str	r2, [r3, #0]
 173:../timer.c    **** 
 174:../timer.c    **** 	return 0;
 2277              		.loc 1 174 0
 2278 0534 0030A0E3 		mov	r3, #0
 2279              	.L49:
 175:../timer.c    **** }
 2280              		.loc 1 175 0
 2281 0538 0300A0E1 		mov	r0, r3
 2282 053c 0CD04BE2 		sub	sp, fp, #12
 2283 0540 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2284 0544 1EFF2FE1 		bx	lr
 2285              	.L51:
 2286              		.align	2
 2287              	.L50:
 2288 0548 0800D501 		.word	30736392
 2289              		.cfi_endproc
 2290              	.LFE5:
 2292              		.align	2
 2293              		.global	tmr_stop
 2295              	tmr_stop:
 2296              	.LFB6:
 176:../timer.c    **** 
 177:../timer.c    **** int tmr_stop(enum tmr_timer t)
 178:../timer.c    **** {
 2297              		.loc 1 178 0
 2298              		.cfi_startproc
 2299              		@ Function supports interworking.
 2300              		@ args = 0, pretend = 0, frame = 16
 2301              		@ frame_needed = 1, uses_anonymous_args = 0
 2302 054c 0DC0A0E1 		mov	ip, sp
 2303              	.LCFI12:
 2304              		.cfi_def_cfa_register 12
 2305 0550 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2306 0554 04B04CE2 		sub	fp, ip, #4
 2307              		.cfi_offset 14, -8
 2308              		.cfi_offset 13, -12
 2309              		.cfi_offset 11, -16
 2310              	.LCFI13:
 2311              		.cfi_def_cfa 11, 4
 2312 0558 10D04DE2 		sub	sp, sp, #16
 2313 055c 0030A0E1 		mov	r3, r0
 2314 0560 15304BE5 		strb	r3, [fp, #-21]
 179:../timer.c    **** 	int pos = t*4;
 2315              		.loc 1 179 0
 2316 0564 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2317 0568 0331A0E1 		mov	r3, r3, asl #2
 2318 056c 10300BE5 		str	r3, [fp, #-16]
 180:../timer.c    **** 	if (t > 0)
 2319              		.loc 1 180 0
 2320 0570 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2321 0574 000053E3 		cmp	r3, #0
 2322 0578 0200000A 		beq	.L53
 181:../timer.c    **** 		pos += 4;
 2323              		.loc 1 181 0
 2324 057c 10301BE5 		ldr	r3, [fp, #-16]
 2325 0580 043083E2 		add	r3, r3, #4
 2326 0584 10300BE5 		str	r3, [fp, #-16]
 2327              	.L53:
 182:../timer.c    **** 
 183:../timer.c    **** 	if (t < 0 || t > 5)
 2328              		.loc 1 183 0
 2329 0588 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2330 058c 050053E3 		cmp	r3, #5
 2331 0590 0100009A 		bls	.L54
 184:../timer.c    **** 		return -1;
 2332              		.loc 1 184 0
 2333 0594 0030E0E3 		mvn	r3, #0
 2334 0598 090000EA 		b	.L55
 2335              	.L54:
 185:../timer.c    **** 
 186:../timer.c    **** 	//COMPLETAR:  Dar el valor adecuado al bit de start para parar el TIMER a partir de la posición po
 187:../timer.c    **** 	//registro rTCON (es el primer bit del grupo)
 188:../timer.c    **** 	rTCON &=~ (0x1 << pos);
 2336              		.loc 1 188 0
 2337 059c 30309FE5 		ldr	r3, .L56
 2338 05a0 2C209FE5 		ldr	r2, .L56
 2339 05a4 001092E5 		ldr	r1, [r2, #0]
 2340 05a8 0100A0E3 		mov	r0, #1
 2341 05ac 10201BE5 		ldr	r2, [fp, #-16]
 2342 05b0 1022A0E1 		mov	r2, r0, asl r2
 2343 05b4 0220E0E1 		mvn	r2, r2
 2344 05b8 022001E0 		and	r2, r1, r2
 2345 05bc 002083E5 		str	r2, [r3, #0]
 189:../timer.c    **** 
 190:../timer.c    **** 	return 0;
 2346              		.loc 1 190 0
 2347 05c0 0030A0E3 		mov	r3, #0
 2348              	.L55:
 191:../timer.c    **** }
 2349              		.loc 1 191 0
 2350 05c4 0300A0E1 		mov	r0, r3
 2351 05c8 0CD04BE2 		sub	sp, fp, #12
 2352 05cc 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2353 05d0 1EFF2FE1 		bx	lr
 2354              	.L57:
 2355              		.align	2
 2356              	.L56:
 2357 05d4 0800D501 		.word	30736392
 2358              		.cfi_endproc
 2359              	.LFE6:
 2361              		.align	2
 2362              		.global	tmr_isrunning
 2364              	tmr_isrunning:
 2365              	.LFB7:
 192:../timer.c    **** 
 193:../timer.c    **** int tmr_isrunning(enum tmr_timer t)
 194:../timer.c    **** {
 2366              		.loc 1 194 0
 2367              		.cfi_startproc
 2368              		@ Function supports interworking.
 2369              		@ args = 0, pretend = 0, frame = 16
 2370              		@ frame_needed = 1, uses_anonymous_args = 0
 2371 05d8 0DC0A0E1 		mov	ip, sp
 2372              	.LCFI14:
 2373              		.cfi_def_cfa_register 12
 2374 05dc 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2375 05e0 04B04CE2 		sub	fp, ip, #4
 2376              		.cfi_offset 14, -8
 2377              		.cfi_offset 13, -12
 2378              		.cfi_offset 11, -16
 2379              	.LCFI15:
 2380              		.cfi_def_cfa 11, 4
 2381 05e4 10D04DE2 		sub	sp, sp, #16
 2382 05e8 0030A0E1 		mov	r3, r0
 2383 05ec 15304BE5 		strb	r3, [fp, #-21]
 195:../timer.c    **** 	int ret = 0;
 2384              		.loc 1 195 0
 2385 05f0 0030A0E3 		mov	r3, #0
 2386 05f4 10300BE5 		str	r3, [fp, #-16]
 196:../timer.c    **** 	int pos = t*4;
 2387              		.loc 1 196 0
 2388 05f8 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2389 05fc 0331A0E1 		mov	r3, r3, asl #2
 2390 0600 14300BE5 		str	r3, [fp, #-20]
 197:../timer.c    **** 	if (t > 0)
 2391              		.loc 1 197 0
 2392 0604 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2393 0608 000053E3 		cmp	r3, #0
 2394 060c 0200000A 		beq	.L59
 198:../timer.c    **** 		pos += 4;
 2395              		.loc 1 198 0
 2396 0610 14301BE5 		ldr	r3, [fp, #-20]
 2397 0614 043083E2 		add	r3, r3, #4
 2398 0618 14300BE5 		str	r3, [fp, #-20]
 2399              	.L59:
 199:../timer.c    **** 
 200:../timer.c    **** 	if ((t >= 0) && (t <= 5)
 2400              		.loc 1 200 0
 2401 061c 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2402 0620 050053E3 		cmp	r3, #5
 2403 0624 0900008A 		bhi	.L60
 201:../timer.c    **** 			&& (rTCON & (0x1 << pos)))
 2404              		.loc 1 201 0
 2405 0628 34309FE5 		ldr	r3, .L61
 2406 062c 002093E5 		ldr	r2, [r3, #0]
 2407 0630 0110A0E3 		mov	r1, #1
 2408 0634 14301BE5 		ldr	r3, [fp, #-20]
 2409 0638 1133A0E1 		mov	r3, r1, asl r3
 2410 063c 033002E0 		and	r3, r2, r3
 2411 0640 000053E3 		cmp	r3, #0
 2412 0644 0100000A 		beq	.L60
 202:../timer.c    **** 		ret = 1;
 2413              		.loc 1 202 0
 2414 0648 0130A0E3 		mov	r3, #1
 2415 064c 10300BE5 		str	r3, [fp, #-16]
 2416              	.L60:
 203:../timer.c    **** 
 204:../timer.c    **** 	return ret;
 2417              		.loc 1 204 0
 2418 0650 10301BE5 		ldr	r3, [fp, #-16]
 205:../timer.c    **** }
 2419              		.loc 1 205 0
 2420 0654 0300A0E1 		mov	r0, r3
 2421 0658 0CD04BE2 		sub	sp, fp, #12
 2422 065c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2423 0660 1EFF2FE1 		bx	lr
 2424              	.L62:
 2425              		.align	2
 2426              	.L61:
 2427 0664 0800D501 		.word	30736392
 2428              		.cfi_endproc
 2429              	.LFE7:
 2431              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 timer.c
C:\Users\USUARI~1\AppData\Local\Temp\cct1Ku2f.s:1701   .text:00000000 $a
C:\Users\USUARI~1\AppData\Local\Temp\cct1Ku2f.s:1704   .text:00000000 tmr_set_prescaler
C:\Users\USUARI~1\AppData\Local\Temp\cct1Ku2f.s:1792   .text:000000d8 $d
C:\Users\USUARI~1\AppData\Local\Temp\cct1Ku2f.s:1796   .text:000000dc $a
C:\Users\USUARI~1\AppData\Local\Temp\cct1Ku2f.s:1799   .text:000000dc tmr_set_divider
C:\Users\USUARI~1\AppData\Local\Temp\cct1Ku2f.s:1908   .text:000001ec $d
C:\Users\USUARI~1\AppData\Local\Temp\cct1Ku2f.s:1912   .text:000001f0 $a
C:\Users\USUARI~1\AppData\Local\Temp\cct1Ku2f.s:1915   .text:000001f0 tmr_set_count
C:\Users\USUARI~1\AppData\Local\Temp\cct1Ku2f.s:1946   .text:00000228 $d
C:\Users\USUARI~1\AppData\Local\Temp\cct1Ku2f.s:1954   .text:00000240 $a
C:\Users\USUARI~1\AppData\Local\Temp\cct1Ku2f.s:2029   .text:000002f8 $d
C:\Users\USUARI~1\AppData\Local\Temp\cct1Ku2f.s:2043   .text:00000324 $a
C:\Users\USUARI~1\AppData\Local\Temp\cct1Ku2f.s:2046   .text:00000324 tmr_update
C:\Users\USUARI~1\AppData\Local\Temp\cct1Ku2f.s:2119   .text:000003d4 $d
C:\Users\USUARI~1\AppData\Local\Temp\cct1Ku2f.s:2123   .text:000003d8 $a
C:\Users\USUARI~1\AppData\Local\Temp\cct1Ku2f.s:2126   .text:000003d8 tmr_set_mode
C:\Users\USUARI~1\AppData\Local\Temp\cct1Ku2f.s:2220   .text:000004c0 $d
C:\Users\USUARI~1\AppData\Local\Temp\cct1Ku2f.s:2224   .text:000004c4 $a
C:\Users\USUARI~1\AppData\Local\Temp\cct1Ku2f.s:2227   .text:000004c4 tmr_start
C:\Users\USUARI~1\AppData\Local\Temp\cct1Ku2f.s:2288   .text:00000548 $d
C:\Users\USUARI~1\AppData\Local\Temp\cct1Ku2f.s:2292   .text:0000054c $a
C:\Users\USUARI~1\AppData\Local\Temp\cct1Ku2f.s:2295   .text:0000054c tmr_stop
C:\Users\USUARI~1\AppData\Local\Temp\cct1Ku2f.s:2357   .text:000005d4 $d
C:\Users\USUARI~1\AppData\Local\Temp\cct1Ku2f.s:2361   .text:000005d8 $a
C:\Users\USUARI~1\AppData\Local\Temp\cct1Ku2f.s:2364   .text:000005d8 tmr_isrunning
C:\Users\USUARI~1\AppData\Local\Temp\cct1Ku2f.s:2427   .text:00000664 $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
